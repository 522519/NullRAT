using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Nulllib;
using NullRAT.Variables;
using Spectre.Console;

internal class VariableParser
{
    public static async Task ProcessVariablesPy()
    {
        StreamReader sr = new(Environment.CurrentDirectory + "/src/Variables.py");
        string fileContent = sr.ReadToEnd();
        sr.Dispose();
        sr.Close();
        if (fileContent.Contains("# This file was auto-generated by NullRAT Variables. DO NOT SHARE!"))
        {
            Console.WriteLine();
            if (AnsiConsole.Confirm("A previous configuration file was detected, do you want to see it's contents?"))
            {
                var table = new Table().Collapse();
                table.Border = TableBorder.AsciiDoubleHead;
                table.Alignment = Justify.Center;

                await AnsiConsole.Live(table)
                    .StartAsync(async ctx =>
                    {
                        string[] rows = new string[3];
                        table.AddColumn("Bot Token");
                        table.AddColumn("Notification ID");
                        table.AddColumn("Server IDs");

                        RATVariables variablesPyOld = await ParseVariablesPy(fileContent);

                        rows[0] = variablesPyOld.Bot_Token.ToString();
                        rows[1] = variablesPyOld.Notification_Channel_ID.ToString();
                        rows[2] = variablesPyOld.Server_IDs[0].ToString();

                        table.AddRow(rows);
                        await Task.Delay(69);
                        ctx.Refresh();

                        rows[0] = "";
                        rows[1] = "";

                        foreach (var srvId in variablesPyOld.Server_IDs)
                        {
                            rows[2] = srvId.ToString();
                            table.AddRow(rows);
                            await Task.Delay(1000);
                            ctx.Refresh();
                        }
                    });

                if (AnsiConsole.Confirm("Do you want to use this configuration file?"))
                {
                    MainActivity.EndExecution(); // Kill program. Nothing else to do lol
                }
            }
            else
            {
                AnsiConsole.MarkupLine("[yellow][[WARN]] A previous configuration file was detected, but was invalidated.[/]");
            }
        }
    }
    private static async Task<RATVariables> ParseVariablesPy(string variablespyContent)
    {
        List<Task> tasks = new();

        string token = null!;
        List<ulong> srvIds = new();
        ulong notifCnn = 0;

        string[] splittedContent = variablespyContent.Split(Environment.NewLine);

        for (int i = 0; i < splittedContent.Length; i++)
        {
            if (splittedContent[i].Contains("bot_token", StringComparison.OrdinalIgnoreCase))
            {
                string a = splittedContent[i].Split('=')[1].Replace('\"', ' ');
                token = a.Trim();
            }
            else if (splittedContent[i].Contains("notification_channel", StringComparison.OrdinalIgnoreCase))
            {
                string b = splittedContent[i].Split('=')[1];
                notifCnn = ulong.Parse(b.Trim());
            }
            else if (splittedContent[i].Contains("server_ids", StringComparison.OrdinalIgnoreCase))
            {
                string c = splittedContent[i].Split('=')[1].Replace('[', ' ').Replace(']', ' ');
                string[] individualIds = c.Split(',');

                for (int j = 0; j < individualIds.Length; j++)
                {
                    srvIds.Add(ulong.Parse(individualIds[j]));
                }
            }
        }
        while (tasks.Count > 0)
        {
            Task cmpTask = await Task.WhenAny(tasks);

            if (cmpTask.IsFaulted)
            {
                throw new System.IO.InvalidDataException($"Variables.py is invalid. Task in position [[{tasks.IndexOf(cmpTask)}]] Error -> {cmpTask.Exception}");
            }
            tasks.Remove(cmpTask);
        }

        return new()
        {
            Bot_Token = new(token),
            Notification_Channel_ID = notifCnn,
            Server_IDs = srvIds
        };
    }
}